import {
	mapMutations,
	mapActions,
	mapState,
	mapGetters
} from 'vuex';

import FormValidate from '@/common/validate/authForm';
import schema from '@/uni_modules/uview-ui/libs/util/async-validator';

//import VConsole from 'vconsole';

export default {
	data() {
		return {
			platform: this.$platform.get(),
			form: {
				//注册
				register: {
					data: {
						accountName: '',
						passWord: '',
						confirmPassWord: '',
						fullName: '',
						phoneNumber: '',
						verificationCode: '',
					},

					rules: {
						accountName: FormValidate.register.accountName,
						passWord: FormValidate.register.passWord,
						confirmPassWord: FormValidate.register.confirmPassWord,
						fullName: FormValidate.register.fullName,
						phoneNumber: FormValidate.register.phoneNumber,
						verificationCode: FormValidate.register.verificationCode,
					},

				},

				//账号密码登录
				accountLogin: {
					data: {
						loginName: '15810103071', // 账号
						passWord: 'zzx123456' // 密码
					},
					rules: {
						loginName: FormValidate.accountLogin.loginName,
						passWord: FormValidate.accountLogin.passWord,
					},
				},



				//忘记密码
				forgotPwd: {
					data: {
						phoneNumber: '', //手机号
						verificationCode: '', //验证码
						passWord: '', //新密码
						confirmPassWord: '' //确认密码
					},
					rules: {
						phoneNumber: FormValidate.forgotPwd.phoneNumber,
						verificationCode: FormValidate.forgotPwd.verificationCode,
						passWord: FormValidate.forgotPwd.passWord,
						confirmPassWord: FormValidate.forgotPwd.confirmPassWord,
					},
				},

				//修改密码
				changePwd: {
					data: {
						oldPassWord: '', //旧密码
						passWord: '', //新密码
						confirmPassWord: '' //确认密码
					},

					rules: {
						oldPassWord: FormValidate.changePwd.oldPassWord,
						passWord: FormValidate.changePwd.passWord,
						confirmPassWord: FormValidate.changePwd.confirmPassWord,
					},
				},

			},

			codeText: '获取验证码',
			disabledCode: true,
			protocol: false, //是否同意隐私协议
			placeholderStyle: 'font-size: 30rpx; font-weight: 500;color:#C2C7CF;'
		}
	},

	onLoad() {
		//const vConsole = new VConsole();
		//console.log('Hello world');
		 let link = window.location.href;  
		   console.log("link",link); 
	},

	computed: {
		...mapGetters(['isLogin', 'authType']),

	},

	methods: {
		...mapActions(['getUserInfo', 'showAuthPage']),

		//获取短信验证码
		getSmsCode(type) {
			const that = this;
			//手机号符合规则才能发短信
			if (!that.checkValue('phoneNumber')) {
				return;
			}
			if (!that.disabledCode) {
				that.$http(
					'common.smsSend', {
						Telephone: that.form[this.authType].data.phoneNumber,
						SmsType: type
					},
					'获取验证码中...'
				).then(res => {
					if (res.code === 200) {
						that.codeChange();
						that.$u.toast('验证码已发送，请注意查收短信');
					} else {
						that.$u.toast(res.msg);
					}
				});
			} else {
				that.$u.toast('请稍后再试');
			}
		},

		// 倒计时
		codeChange() {
			if (this.disabledCode) return;
			this.disabledCode = true;
			let n = 60;
			this.codeText = n + ' s';
			const run = setInterval(() => {
				n -= 1;
				if (n < 0) {
					clearInterval(run);
				}
				this.codeText = n + ' s';
				if (n < 0) {
					this.disabledCode = false;
					this.codeText = '重新获取';
				}
			}, 1000);
		},

		checkPhoneNumber() {
			//手机号符合规则才能获取验证码
			let valid = true
			this.validation('phoneNumber', error => {
				if (error) {
					valid = false;
				}
			});

			if (valid) {
				this.disabledCode = false
			} else {
				this.disabledCode = true
			}
		},

		// 检测
		checkValue(key) {
			let valid = true
			this.validation(key, error => {
				if (error) {
					valid = false;
					this.$u.toast(error);
				}
			});
			return valid;
		},

		validation(key, callback = () => {}) {
			console.log('######validation begin######');
			let that = this;
			//拿到需要校验的数据
			let fieldValue = this.form[this.authType].data[key];

			//确认密码字段把密码字段值也传
			if (key === 'confirmPassWord') {
				fieldValue = this.form[this.authType].data['passWord'] + ',' + this.form[this.authType].data[key];
			}
			//拿到需要检验的规则
			let rules = this.form[this.authType].rules[key];

			// 判空
			if (!rules || rules.length === 0) {
				return callback('');
			}
			// 设置当前的装填，标识为校验中
			let validateState = 'validating';
			// 调用async-validator的方法
			let validator = new schema({
				[key]: rules
			});

			// 校验
			validator.validate({
					[key]: fieldValue
				}, {
					firstFields: true
				},
				(errors, fields) => {
					// 记录状态和报错信息
					validateState = !errors ? 'success' : 'error';
					let validateMessage = errors ? errors[0].message : '';
					callback(validateMessage);
				}
			);
			console.log('######validation end######');
		},


		validateAll() {
			let that = this;
			return new Promise(resolve => {
				// 对当前所有表单检验
				let valid = true; // 默认通过
				let count = 0; // 用于标记是否检查完毕
				let errorArr = []; // 存放错误信息
				let curFormData = that.form[that.authType].data;

				Object.keys(curFormData).map(field => {
					that.validation(field, error => {
						//如果回调有error
						if (error) {
							valid = false;
							errorArr.push(error);
						}

						if (++count === Object.keys(curFormData).length) {
							console.log('===');
							resolve(valid);
							if (errorArr.length) {
								this.$u.toast(errorArr[0]);
							}
							if (typeof callback == 'function') callback(valid);
						}
					})
				})
			}).catch((e) => {}); //解决微信内置的浏览器报错
		},

		// 规则校验
		validateSubmit() {
			if (['register', 'accountLogin'].includes(this.authType) && !this.protocol) {
				this.$u.toast('请同意用户协议');
				return false;
			}
			let valid = this.validateAll();
			return valid;
		},


		jumpForgotPwd() {
			this.showAuthPage('forgotPwd')
			uni.setNavigationBarTitle({
				title: '忘记密码'
			})
		},

		jumpRegister() {
			this.showAuthPage('register')
			uni.setNavigationBarTitle({
				title: '注册'
			})
		},

		jumpAccountLogin() {
			this.showAuthPage('accountLogin')
			uni.setNavigationBarTitle({
				title: '登录'
			})
		},
		
		// 注册
		async registerSubmit() {
			let that = this;
			(await that.validateSubmit()) && that.$http(
				'user.register', {
					accountName: that.form['register'].data.accountName,
					fullName: that.form['register'].data.fullName,
					passWord: that.form['register'].data.passWord,
					confirmPassWord: that.form['register'].data.confirmPassWord,
					phoneNumber: that.form['register'].data.phoneNumber,
					verificationCode: that.form['register'].data.verificationCode
				},
				'注册中...'
			).then(res => {
				console.log(res)
				if (res.code === 200) {
					that.$u.toast(res.message);
					that.showAuthPage('accountLogin');
					that.getUserInfo(res.data.token);
				}else{
					that.$u.toast(res.message);
				}
				console.log('cannet-auth-modal.vue->registerSubmit end')
			});
		},

		//账号登录
		async accountLoginSubmit() {

			let that = this;
			(await that.validateSubmit()) && that.$http(
					'user.accountLogin', {
						loginName: that.form['accountLogin'].data.loginName,
						passWord: that.form['accountLogin'].data.passWord
					},
					'登录中...'
				)
				.then(res => {
					console.log('accountLoginSubmit http res:', res)
					if (res.code === 200) {
						
						uni.setStorageSync("userInfo", res.data)
						
						// let id = res.data.id
						// let token = 'Bearer ' + res.data.token
						// uni.setStorageSync("token", token)
						// that.getUserInfo(id);
						
						that.$u.toast(res.message);
						uni.switchTab({
							url: '/pages/index/index/index'
						});


					} else {

						//that.getUserInfo(res.data.token);
						that.$u.toast(res.message);

					}


				});


		},


		//忘记密码
		async forgotPwdSubmit() {

			let userInfo = uni.getStorageSync('userInfo');
			console.log('userInfo:');
			console.log(userInfo);
			let that = this;
			(await that.validateSubmit()) && that.$http(
				'user.forgotPwd', {
					phoneNumber: that.form['forgotPwd'].data.phoneNumber,
					verificationCode: that.form['forgotPwd'].data.verificationCode,
					passWord: that.form['forgotPwd'].data.passWord,
					confirmPassWord: that.form['forgotPwd'].data.confirmPassWord
				},
				'修改中...'
			).then(res => {
				console.log(res);
				if (res.code === 200) {
					that.$u.toast(res.message);
					that.showAuthPage('accountLogin');
				}

			});
		},

	}
}
