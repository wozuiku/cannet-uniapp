import {
	mapMutations,
	mapActions,
	mapState,
	mapGetters
} from 'vuex';

import formRule from '@/common/validate/rule';
import formValidate from '@/common/validate/validate';


export default {
	data() {
		return {
			platform: this.$platform.get(),
			form: {
				//注册
				register: {
					data: {
						accountName: '',
						passWord: '',
						confirmPassWord: '',
						fullName: '',
						phoneNumber: '',
						verificationCode: '',
					},

					rules: {
						accountName: formRule.register.accountName,
						passWord: formRule.register.passWord,
						confirmPassWord: formRule.register.confirmPassWord,
						fullName: formRule.register.fullName,
						phoneNumber: formRule.register.phoneNumber,
						verificationCode: formRule.register.verificationCode,
					},
				},

				//账号密码登录
				accountLogin: {
					data: {
						loginName: '15810103071', // 账号
						passWord: 'zzx123456' // 密码
					},
					rules: {
						loginName: formRule.accountLogin.loginName,
						passWord: formRule.accountLogin.passWord,
					},
				},



				//忘记密码
				forgotPwd: {
					data: {
						phoneNumber: '', //手机号
						verificationCode: '', //验证码
						passWord: '', //新密码
						confirmPassWord: '' //确认密码
					},
					rules: {
						phoneNumber: formRule.forgotPwd.phoneNumber,
						verificationCode: formRule.forgotPwd.verificationCode,
						passWord: formRule.forgotPwd.passWord,
						confirmPassWord: formRule.forgotPwd.confirmPassWord,
					},
				},

				//修改密码
				changePwd: {
					data: {
						oldPassWord: '', //旧密码
						passWord: '', //新密码
						confirmPassWord: '' //确认密码
					},

					rules: {
						oldPassWord: formRule.changePwd.oldPassWord,
						passWord: formRule.changePwd.passWord,
						confirmPassWord: formRule.changePwd.confirmPassWord,
					},
				},

			},
			
			show: true,
			showConfirm: true,
			codeText: '获取验证码',
			disabledCode: true,
			protocol: false, //是否同意隐私协议
			placeholderStyle: 'font-size: 30rpx; font-weight: 500;color:#C2C7CF;'
		}
	},

	onLoad() {
		let link = window.location.href;  
		console.log("link",link); 
	},

	computed: {
		...mapGetters(['isLogin', 'authType']),
	},

	methods: {
		...mapActions(['getUserInfo', 'showAuthPage']),

		//获取短信验证码
		getSmsCode(authType, type) {
			const that = this;
			//手机号符合规则才能发短信
			if (!that.checkValue(authType, 'phoneNumber')) {
				return;
			}
			if (!that.disabledCode) {
				that.$http(
					'common.smsSend', {
						Telephone: that.form[this.authType].data.phoneNumber,
						SmsType: type
					},
					'获取验证码中...'
				).then(res => {
					if (res.code === 200) {
						that.codeChange();
						that.$u.toast('验证码已发送，请注意查收短信');
					} else {
						that.$u.toast(res.msg);
					}
				});
			} else {
				that.$u.toast('请稍后再试');
			}
		},

		// 倒计时
		codeChange() {
			if (this.disabledCode) return;
			this.disabledCode = true;
			let n = 60;
			this.codeText = n + ' s';
			const run = setInterval(() => {
				n -= 1;
				if (n < 0) {
					clearInterval(run);
				}
				this.codeText = n + ' s';
				if (n < 0) {
					this.disabledCode = false;
					this.codeText = '重新获取';
				}
			}, 1000);
		},
		
		
		checkPhoneNumber(authType) {
			let valid = true
			//拿到需要校验的数据
			let value = this.form[authType].data['phoneNumber'];
			//拿到需要检验的规则
			let rule = this.form[authType].rules['phoneNumber'];
			formValidate.validation('phoneNumber', value, rule, error => {
				if (error) {
					valid = false;
				}
			});
			
			if (valid) {
				this.disabledCode = false
			} else {
				this.disabledCode = true
			}
		},
		
		
		//校验单个字段
		checkValue(authType, key) {
			let valid = true
			//拿到需要校验的数据
			let value = this.form[authType].data[key];
			//拿到需要检验的规则
			let rule = this.form[authType].rules[key];
			formValidate.validation(key, value, rule, error => {
				if (error) {
					valid = false;
					this.$u.toast(error);
				}
			});
			return valid;
		},
		
		
		//校验所有字段
		async checkAll(authType) {
			
			if (['register'].includes(authType) && !this.protocol) {
				this.$u.toast('请同意用户协议');
				return false;
			}
			
			let valid = await formValidate.validateAll(this.form[authType].data, this.form[authType].rules);
			
			if(authType == 'register' || authType == 'forgotPwd'){
				if(valid){
					if(this.form[authType].data.passWord != this.form[authType].data.confirmPassWord){
						this.$u.toast('密码和确认密码需相同');
						valid = false
					}
				}
			}
			
			return valid;
		},
		
		
		showPassword(){
			if(this.show){
				this.show = false
			}else{
				this.show = true
			}
		},
		
		showConfirmPassWord(){
			if(this.showConfirm){
				this.showConfirm = false
			}else{
				this.showConfirm = true
			}
		},
		
		
		
		
		
		jumpForgotPwd() {
			this.showAuthPage('forgotPwd')
			uni.setNavigationBarTitle({
				title: '忘记密码'
			})
		},

		jumpRegister() {
			this.showAuthPage('register')
			uni.setNavigationBarTitle({
				title: '注册'
			})
		},

		jumpAccountLogin() {
			this.showAuthPage('accountLogin')
			uni.setNavigationBarTitle({
				title: '登录'
			})
		},
		
		// 注册
		async registerSubmit() {
			let that = this;
			(await that.checkAll('register')) && that.$http(
				'user.register', {
					accountName: that.form['register'].data.phoneNumber,
					fullName: that.form['register'].data.fullName,
					passWord: that.form['register'].data.passWord,
					confirmPassWord: that.form['register'].data.confirmPassWord,
					phoneNumber: that.form['register'].data.phoneNumber,
					verificationCode: that.form['register'].data.verificationCode
				},
				'注册中...'
			).then(res => {
				console.log(res)
				if (res.code === 200) {
					that.$u.toast(res.message);
					that.showAuthPage('accountLogin');
					//that.getUserInfo(res.data.token);
				}else{
					that.$u.toast(res.message);
				}
				//console.log('cannet-auth-modal.vue->registerSubmit end')
			});
		},

		//账号登录
		async accountLoginSubmit() {

			let that = this;
			(await that.checkAll('accountLogin')) && that.$http(
					'user.accountLogin', {
						loginName: that.form['accountLogin'].data.loginName,
						passWord: that.form['accountLogin'].data.passWord
					},
					'登录中...'
				)
				.then(res => {
					console.log('accountLoginSubmit http res:', res)
					if (res.code === 200) {
						uni.setStorageSync("userInfo", res.data)
						that.$u.toast(res.message);
						uni.switchTab({
							url: '/pages/index/index/index'
						});
					} else {
						//that.getUserInfo(res.data.token);
						that.$u.toast(res.message);
					}
				});
		},
		
		//忘记密码
		async forgotPwdSubmit() {
			let userInfo = uni.getStorageSync('userInfo');
			console.log('userInfo:');
			console.log(userInfo);
			let that = this;
			(await that.checkAll('forgotPwd')) && that.$http(
				'user.forgotPwd', {
					phoneNumber: that.form['forgotPwd'].data.phoneNumber,
					verificationCode: that.form['forgotPwd'].data.verificationCode,
					passWord: that.form['forgotPwd'].data.passWord,
					confirmPassWord: that.form['forgotPwd'].data.confirmPassWord
				},
			).then(res => {
				that.$u.toast(res.message);
				if (res.code === 200) {
					that.showAuthPage('accountLogin');
				}
			});
		},
	}
}
